// This file is autogenerated by the hrpc compiler

const { c, RPC, RPCStream, RPCRequestStream } = require('hrpc/runtime');
const { getEncoding } = require('./messages.js');

const methods = new Map([
  ['@wdk-secret-manager/command-workletStart', 0],
  [0, '@wdk-secret-manager/command-workletStart'],
  ['@wdk-secret-manager/command-workletStop', 1],
  [1, '@wdk-secret-manager/command-workletStop'],
  ['@wdk-secret-manager/command-generateAndEncrypt', 2],
  [2, '@wdk-secret-manager/command-generateAndEncrypt'],
  ['@wdk-secret-manager/command-decrypt', 3],
  [3, '@wdk-secret-manager/command-decrypt'],
  ['@wdk-secret-manager/command-log', 4],
  [4, '@wdk-secret-manager/command-log'],
]);

class HRPC {
  constructor(stream) {
    this._stream = stream;
    this._handlers = [];
    this._requestEncodings = new Map([
      [
        '@wdk-secret-manager/command-workletStart',
        getEncoding('@wdk-secret-manager/command-workletStart-request'),
      ],
      [
        '@wdk-secret-manager/command-workletStop',
        getEncoding('@wdk-secret-manager/command-workletStop-request'),
      ],
      [
        '@wdk-secret-manager/command-generateAndEncrypt',
        getEncoding('@wdk-secret-manager/command-generateAndEncrypt-request'),
      ],
      [
        '@wdk-secret-manager/command-decrypt',
        getEncoding('@wdk-secret-manager/command-decrypt-request'),
      ],
      ['@wdk-secret-manager/command-log', getEncoding('@wdk-secret-manager/command-log-request')],
    ]);
    this._responseEncodings = new Map([
      [
        '@wdk-secret-manager/command-workletStart',
        getEncoding('@wdk-secret-manager/command-workletStart-response'),
      ],
      [
        '@wdk-secret-manager/command-workletStop',
        getEncoding('@wdk-secret-manager/command-workletStop-response'),
      ],
      [
        '@wdk-secret-manager/command-generateAndEncrypt',
        getEncoding('@wdk-secret-manager/command-generateAndEncrypt-response'),
      ],
      [
        '@wdk-secret-manager/command-decrypt',
        getEncoding('@wdk-secret-manager/command-decrypt-response'),
      ],
    ]);
    this._rpc = new RPC(stream, async req => {
      const command = methods.get(req.command);
      const responseEncoding = this._responseEncodings.get(command);
      const requestEncoding = this._requestEncodings.get(command);
      if (this._requestIsSend(command)) {
        const request = req.data ? c.decode(requestEncoding, req.data) : null;
        await this._handlers[command](request);
        return;
      }
      if (!this._requestIsStream(command) && !this._responseIsStream(command)) {
        const request = req.data ? c.decode(requestEncoding, req.data) : null;
        const response = await this._handlers[command](request);
        req.reply(c.encode(responseEncoding, response));
      }
      if (!this._requestIsStream(command) && this._responseIsStream(command)) {
        const request = req.data ? c.decode(requestEncoding, req.data) : null;
        const responseStream = new RPCStream(
          null,
          null,
          req.createResponseStream(),
          responseEncoding
        );
        responseStream.data = request;
        await this._handlers[command](responseStream);
      }
      if (this._requestIsStream(command) && !this._responseIsStream(command)) {
        const requestStream = new RPCRequestStream(
          req,
          responseEncoding,
          req.createRequestStream(),
          requestEncoding
        );
        const response = await this._handlers[command](requestStream);
        req.reply(c.encode(responseEncoding, response));
      }
      if (this._requestIsStream(command) && this._responseIsStream(command)) {
        const requestStream = new RPCRequestStream(
          req,
          responseEncoding,
          req.createRequestStream(),
          requestEncoding,
          req.createResponseStream(),
          responseEncoding
        );
        await this._handlers[command](requestStream);
      }
    });
  }

  async _call(name, args) {
    const requestEncoding = this._requestEncodings.get(name);
    const responseEncoding = this._responseEncodings.get(name);
    const request = this._rpc.request(methods.get(name));
    const encoded = c.encode(requestEncoding, args);
    request.send(encoded);
    return c.decode(responseEncoding, await request.reply());
  }

  _callSync(name, args) {
    const requestEncoding = this._requestEncodings.get(name);
    const responseEncoding = this._responseEncodings.get(name);
    const request = this._rpc.request(methods.get(name));
    if (this._requestIsSend(name)) {
      const encoded = c.encode(requestEncoding, args);
      request.send(encoded);
    }
    if (!this._requestIsStream(name) && this._responseIsStream(name)) {
      const encoded = c.encode(requestEncoding, args);
      request.send(encoded);
      return new RPCStream(request.createResponseStream(), responseEncoding);
    }
    if (this._requestIsStream(name) && !this._responseIsStream(name)) {
      return new RPCRequestStream(
        request,
        responseEncoding,
        null,
        null,
        request.createRequestStream(),
        requestEncoding
      );
    }
    if (this._requestIsStream(name) && this._responseIsStream(name)) {
      return new RPCRequestStream(
        request,
        responseEncoding,
        request.createResponseStream(),
        responseEncoding,
        request.createRequestStream(),
        requestEncoding
      );
    }
  }

  async commandWorkletStart(args) {
    return this._call('@wdk-secret-manager/command-workletStart', args);
  }

  async commandWorkletStop(args) {
    return this._call('@wdk-secret-manager/command-workletStop', args);
  }

  async commandGenerateAndEncrypt(args) {
    return this._call('@wdk-secret-manager/command-generateAndEncrypt', args);
  }

  async commandDecrypt(args) {
    return this._call('@wdk-secret-manager/command-decrypt', args);
  }

  commandLog(args) {
    return this._callSync('@wdk-secret-manager/command-log', args);
  }

  onCommandWorkletStart(responseFn) {
    this._handlers['@wdk-secret-manager/command-workletStart'] = responseFn;
  }

  onCommandWorkletStop(responseFn) {
    this._handlers['@wdk-secret-manager/command-workletStop'] = responseFn;
  }

  onCommandGenerateAndEncrypt(responseFn) {
    this._handlers['@wdk-secret-manager/command-generateAndEncrypt'] = responseFn;
  }

  onCommandDecrypt(responseFn) {
    this._handlers['@wdk-secret-manager/command-decrypt'] = responseFn;
  }

  onCommandLog(responseFn) {
    this._handlers['@wdk-secret-manager/command-log'] = responseFn;
  }

  _requestIsStream(command) {
    return [].includes(command);
  }

  _responseIsStream(command) {
    return [].includes(command);
  }

  _requestIsSend(command) {
    return ['@wdk-secret-manager/command-log'].includes(command);
  }
}

module.exports = HRPC;
